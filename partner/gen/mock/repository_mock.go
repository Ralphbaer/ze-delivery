// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ralphbaer/ze-delivery/partner/repository (interfaces: PartnerRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "github.com/Ralphbaer/ze-delivery/partner/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPartnerRepository is a mock of PartnerRepository interface
type MockPartnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerRepositoryMockRecorder
}

// MockPartnerRepositoryMockRecorder is the mock recorder for MockPartnerRepository
type MockPartnerRepositoryMockRecorder struct {
	mock *MockPartnerRepository
}

// NewMockPartnerRepository creates a new mock instance
func NewMockPartnerRepository(ctrl *gomock.Controller) *MockPartnerRepository {
	mock := &MockPartnerRepository{ctrl: ctrl}
	mock.recorder = &MockPartnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPartnerRepository) EXPECT() *MockPartnerRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockPartnerRepository) Find(arg0 context.Context, arg1 string) (*entity.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entity.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockPartnerRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPartnerRepository)(nil).Find), arg0, arg1)
}

// FindByDocument mocks base method
func (m *MockPartnerRepository) FindByDocument(arg0 context.Context, arg1 string) (*entity.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDocument", arg0, arg1)
	ret0, _ := ret[0].(*entity.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDocument indicates an expected call of FindByDocument
func (mr *MockPartnerRepositoryMockRecorder) FindByDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDocument", reflect.TypeOf((*MockPartnerRepository)(nil).FindByDocument), arg0, arg1)
}

// FindNearest mocks base method
func (m *MockPartnerRepository) FindNearest(arg0 context.Context, arg1, arg2 float64) (*entity.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearest indicates an expected call of FindNearest
func (mr *MockPartnerRepositoryMockRecorder) FindNearest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearest", reflect.TypeOf((*MockPartnerRepository)(nil).FindNearest), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockPartnerRepository) Save(arg0 context.Context, arg1 *entity.Partner) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockPartnerRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPartnerRepository)(nil).Save), arg0, arg1)
}
